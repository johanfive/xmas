{
  "xMatters Endpoint Index": {
    "prefix": "xm-endpoint",
    "description": "Generate a complete endpoint index.ts file",
    "body": [
      "import { ResourceClient } from '../../core/resource-client.ts';",
      "import type { RequestHandler } from '../../core/request-handler.ts';",
      "import type { HttpResponse } from '../../core/types/internal/http.ts';",
      "import type {",
      "  DeleteOptions,",
      "  GetOptions,",
      "  RequestWithBodyOptions,",
      "} from '../../core/types/internal/http-methods.ts';",
      "import type {",
      "  EmptyHttpResponse,",
      "  PaginatedHttpResponse,",
      "} from '../../core/types/endpoint/response.ts';",
      "import type { Get${1:Resource}Params, Get${1:Resource}sParams, Get${1:Resource}sResponse, ${1:Resource} } from './types.ts';",
      "",
      "/**",
      " * Provides access to the ${2:${1/(.*)/${1:/downcase}/}} endpoints of the xMatters API.",
      " * Use this class to manage ${2:${1/(.*)/${1:/downcase}/}}s, including listing, creating, updating, and deleting ${2:${1/(.*)/${1:/downcase}/}}s.",
      " */",
      "export class ${1:Resource}sEndpoint {",
      "  private readonly http: ResourceClient;",
      "",
      "  constructor(http: RequestHandler) {",
      "    this.http = new ResourceClient(http, '/${3:${1/(.*)/${1:/downcase}/}}s');",
      "  }",
      "",
      "  /**",
      "   * Get a list of ${2:${1/(.*)/${1:/downcase}/}}s from xMatters.",
      "   * The results can be filtered and paginated using the options object.",
      "   *",
      "   * @param options Optional parameters including query filters, headers, and other request options",
      "   * @returns The HTTP response containing a paginated list of ${2:${1/(.*)/${1:/downcase}/}}s",
      "   * @throws {XmApiError} If the request fails",
      "   */",
      "  get(",
      "    options?: Omit<GetOptions, 'path'> & { path?: string; query?: Get${1:Resource}sParams },",
      "  ): Promise<PaginatedHttpResponse<${1:Resource}>> {",
      "    return this.http.get<Get${1:Resource}sResponse>(options);",
      "  }",
      "",
      "  /**",
      "   * Get a ${2:${1/(.*)/${1:/downcase}/}} by its ID or targetName.",
      "   *",
      "   * @param identifier The ID or targetName of the ${2:${1/(.*)/${1:/downcase}/}} to retrieve",
      "   * @param options Optional request options including embed parameters and headers",
      "   * @returns The HTTP response containing the ${2:${1/(.*)/${1:/downcase}/}}",
      "   * @throws {XmApiError} If the request fails",
      "   */",
      "  getByIdentifier(",
      "    identifier: string,",
      "    options?: Omit<GetOptions, 'path'> & { query?: Get${1:Resource}Params },",
      "  ): Promise<HttpResponse<${1:Resource}>> {",
      "    return this.http.get<${1:Resource}>({ ...options, path: identifier });",
      "  }",
      "",
      "  /**",
      "   * Create a new ${2:${1/(.*)/${1:/downcase}/}} or update an existing one",
      "   *",
      "   * @param ${2:${1/(.*)/${1:/downcase}/}} The ${2:${1/(.*)/${1:/downcase}/}} to create or update",
      "   * @param overrides Optional request overrides like custom headers",
      "   * @returns The HTTP response containing the created or updated ${2:${1/(.*)/${1:/downcase}/}}",
      "   * @throws {XmApiError} If the request fails",
      "   */",
      "  save(",
      "    ${2:${1/(.*)/${1:/downcase}/}}: Partial<${1:Resource}>,",
      "    overrides?: Omit<RequestWithBodyOptions, 'path'>,",
      "  ): Promise<HttpResponse<${1:Resource}>> {",
      "    return this.http.post<${1:Resource}>({ ...overrides, body: ${2:${1/(.*)/${1:/downcase}/}} });",
      "  }",
      "",
      "  /**",
      "   * Delete a ${2:${1/(.*)/${1:/downcase}/}} by ID",
      "   *",
      "   * @param id The ID of the ${2:${1/(.*)/${1:/downcase}/}} to delete",
      "   * @param overrides Optional request overrides like custom headers",
      "   * @returns The HTTP response",
      "   * @throws {XmApiError} If the request fails",
      "   */",
      "  delete(",
      "    id: string,",
      "    overrides?: Omit<DeleteOptions, 'path'>,",
      "  ): Promise<EmptyHttpResponse> {",
      "    return this.http.delete<void>({ ...overrides, path: id });",
      "  }",
      "}",
      "$0"
    ]
  }
}
